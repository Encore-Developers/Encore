# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: Build Windows (x64, x86), Linux, MacOS
on:
  workflow_dispatch:
  pull_request:
    branches: ['main', 'indev']
  push:
    branches: ['main', 'indev']

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build-windows:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4
    - name: Configure CMake x64
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build_x64 -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build x64
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build_x64 --config ${{env.BUILD_TYPE}}

    - name: Move Assets/Songs folders and bass.dll x64
      working-directory: ${{github.workspace}}/build_x64/Encore
      run: move Assets Release/Assets ; move Songs Release/Songs ; move bass.dll Release/bass.dll ; move bassopus.dll Release/bassopus.dll ; move players.json Release/players.json
        
    - uses: actions/upload-artifact@v4
      with:
        name: Encore_Win_x64
        path: ${{github.workspace}}/build_x64/Encore/Release/*

  build-windows-x86:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Configure CMake x86
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build_x86 -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -A Win32

    - name: Build x86
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build_x86 --config ${{env.BUILD_TYPE}}

    - name: Move Assets/Songs folders and bass.dll x86
      working-directory: ${{github.workspace}}/build_x86/Encore
      run: move Assets Release/Assets ; move Songs Release/Songs ; move bass.dll Release/bass.dll ; move bassopus.dll Release/bassopus.dll ; move players.json Release/players.json

    - uses: actions/upload-artifact@v4
      with:
        name: Encore_Win_x86
        path: ${{github.workspace}}/build_x86/Encore/Release/*
        
  build-linux:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Update repos
      run: sudo apt-get update
      
    - name: Install Dependencies
      run: sudo apt-get install libasound2-dev libx11-dev libxrandr-dev libxi-dev libgl1-mesa-dev libglu1-mesa-dev libxcursor-dev libxinerama-dev libwayland-dev libxkbcommon-dev
      
    - name: Configure CMake x64
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build_linux_x64 -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build x64
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build_linux_x64 --config ${{env.BUILD_TYPE}}

    - name: Remove CMake files x64
      working-directory: ${{github.workspace}}/build_linux_x64/Encore
      run: rm -r -f CMakeFiles Makefile cmake_install.cmake

#   - name: Configure CMake x86
#      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
#      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
#      run: cmake -B ${{github.workspace}}/build_linux_x86 -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_C_FLAGS=-m32 -DCMAKE_CXX_FLAGS=-m32
#
#    - name: Build x86
#      # Build your program with the given configuration
#      run: cmake --build ${{github.workspace}}/build_linux_x86 --config ${{env.BUILD_TYPE}}
#
#    - name: Remove CMake files x86
#      working-directory: ${{github.workspace}}/build_linux_x86/Encore
#      run: rm -r -f CMakeFiles Makefile cmake_install.cmake
      
    - uses: actions/upload-artifact@v4
      with:
        name: Encore_Linux_x64
        path: ${{github.workspace}}/build_linux_x64/Encore/*
    
#    - uses: actions/upload-artifact@v4
#      with:
#        name: Encore_Linux_x86
#        path: ${{github.workspace}}/build_linux_x86/Encore/*

        
  build-macos:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v4

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build_macos -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build_macos --config ${{env.BUILD_TYPE}}

    - name: Remove CMake files
      working-directory: ${{github.workspace}}/build_macos/Encore
      run: rm -r -f CMakeFiles Makefile cmake_install.cmake
    
    - name: Create .app Bundle
      working-directory: ${{github.workspace}}
      run: ./create-macos-app.sh
    
    - name: Create Disk Image
      working-directory: ${{github.workspace}}
      run: hdiutil create -volname Encore -srcfolder out -ov -format UDZO Encore.dmg
    
    - uses: actions/upload-artifact@v4
      with:
        name: Encore_macOS
        path: ${{github.workspace}}/Encore.dmg

